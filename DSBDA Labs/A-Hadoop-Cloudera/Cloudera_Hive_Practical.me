
# üêò Cloudera Hive Practical ‚Äì README

This document contains all Hive commands executed in the Cloudera environment for your practicals. Each section is labeled and contains the command followed by its **significance** for clarity and understanding.

---

## üÖê Create, Drop and Alter Tables

```bash
[cloudera@quickstart ~]$ hive
```
**‚ñ∂Ô∏è Significance:** Launches the Hive shell on the Cloudera system.

```sql
hive> create database mydb2;
```
**‚ñ∂Ô∏è Significance:** Creates a new Hive database named `mydb2`.

```sql
hive> use mydb2;
```
**‚ñ∂Ô∏è Significance:** Sets `mydb2` as the current working database.

```sql
hive> create table flight(fno int,year int,dest varchar(10),delay float);
```
**‚ñ∂Ô∏è Significance:** Creates a table named `flight` with 4 columns for storing flight data.

```sql
hive> alter table flight rename to air_flight;
```
**‚ñ∂Ô∏è Significance:** Renames the `flight` table to `air_flight`.

```sql
hive> alter table air_flight add columns(source varchar(10));
```
**‚ñ∂Ô∏è Significance:** Adds a new column `source` to the existing `air_flight` table.

```sql
hive> drop table flight;
```
**‚ñ∂Ô∏è Significance:** Deletes the original `flight` table (if it still exists).

```sql
hive> desc air_flight;
```
**‚ñ∂Ô∏è Significance:** Displays the schema (structure) of the `air_flight` table.

---

## üÖí Load Table with Data, Insert New Values, Joins

```sql
hive> create table flight(fno int,year int,dest varchar(10),delay float)
    > row format delimited
    > fields terminated by ','
    > lines terminated by '\n'
    > stored as textfile;
```
**‚ñ∂Ô∏è Significance:** Creates a new `flight` table where data is stored as a textfile with fields separated by commas.

```sql
hive> insert into flight values(123,2009,'mumbai',30.6);
hive> insert into flight values(124,2008,'pune',50.6);
```
**‚ñ∂Ô∏è Significance:** Inserts two rows of sample flight data.

```sql
hive> select * from flight;
```
**‚ñ∂Ô∏è Significance:** Retrieves and displays all records from the `flight` table.

```sql
hive> load data local inpath "f.txt"
    > overwrite into table flight;
```
**‚ñ∂Ô∏è Significance:** Loads data from the local file `f.txt` into the `flight` table, replacing existing data.

```sql
hive> select * from flight;
```
**‚ñ∂Ô∏è Significance:** Confirms data has been loaded by displaying the table content.

```sql
hive> create table nflight(fno int,year int,source varchar(10))
    > row format delimited
    > fields terminated by ','
    > lines terminated by '\n'
    > stored as textfile;
```
**‚ñ∂Ô∏è Significance:** Creates a new table `nflight` with different structure for demonstrating joins.

```sql
hive> insert into nflight values(923,2009,'pune');
```
**‚ñ∂Ô∏è Significance:** Adds a sample row to the `nflight` table.

```sql
hive> select a.fno,a.year,a.dest,a.delay,b.source
    > from flight a join nflight b
    > on (a.fno=b.fno);
```
**‚ñ∂Ô∏è Significance:** Performs an inner join on `flight` and `nflight` using the `fno` field.

```sql
hive> select * from nflight;
hive> select * from flight;
// Checking all tables
```
**‚ñ∂Ô∏è Significance:** Verifies contents of both tables involved in the join.

---

## üÖì Create Index on Flight Information Table

```sql
hive> create index flight_index on table flight(fno)
    > as 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler'  
    > WITH DEFERRED REBUILD;
```
**‚ñ∂Ô∏è Significance:** Creates an index on `fno` column to improve query performance (deferred rebuild means index will be built later).

```sql
hive> show tables;
// Verifying index created and table exists
```
**‚ñ∂Ô∏è Significance:** Lists all tables in the current database to confirm index and table exist.

---

## üÖë Create External Hive Table

```sql
hive> create database mydb3;
hive> use mydb3;
```
**‚ñ∂Ô∏è Significance:** Creates and switches to a new database `mydb3`.

```sql
hive> create table hive_int(id int,name varchar(10),sal float) 
    > row format delimited
    > fields terminated by ','
    > lines terminated by '\n'
    > stored as textfile;
```
**‚ñ∂Ô∏è Significance:** Creates a managed table `hive_int` for employee data.

```sql
hive> load data local inpath 'data.txt' into table hive_int;
```
**‚ñ∂Ô∏è Significance:** Loads local data from `data.txt` into `hive_int`.

```sql
hive> select * from hive_int;
// Checking data loaded into hive_int
```
**‚ñ∂Ô∏è Significance:** Displays contents of `hive_int`.

```sql
hive> create external table hive_ext(id int,name varchar(10),sal float)
    > row format delimited
    > fields terminated by ','
    > lines terminated by '\n'
    > stored as textfile;
```
**‚ñ∂Ô∏è Significance:** Creates an external table `hive_ext`‚Äîdata is stored outside Hive's warehouse directory.

```sql
hive> insert into hive_ext select * from hive_int;
```
**‚ñ∂Ô∏è Significance:** Copies all data from the internal table to the external table.

```sql
hive> select * from hive_ext;
// Verifying transfer from hive_int to hive_ext
```
**‚ñ∂Ô∏è Significance:** Confirms successful transfer by displaying contents of `hive_ext`.

---

## üÖî HDFS and External Table Setup

```bash
[cloudera@quickstart ~]$ hdfs dfs -mkdir /HiveDirectory
```
**‚ñ∂Ô∏è Significance:** Creates a new directory in HDFS for storing Hive data.

```bash
[cloudera@quickstart ~]$ hdfs dfs -put hive/emp_details /HiveDirectory
// Error shown due to file not present
```
**‚ñ∂Ô∏è Significance:** Attempts to upload a local file to HDFS.

```bash
[cloudera@quickstart ~]$ hive
```
**‚ñ∂Ô∏è Significance:** Reopens Hive shell.

```sql
hive> create external table emplist (Id int, Name string , Salary float)
    > row format delimited
    > fields terminated by ',' 
    > location '/HiveDirectory';
```
**‚ñ∂Ô∏è Significance:** Creates an external table `emplist` using data from `/HiveDirectory`.

```sql
hive> select * from emplist;
```
**‚ñ∂Ô∏è Significance:** Displays contents of `emplist` (if data was successfully loaded).
